# -*- coding: utf-8 -*-
"""st.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NjD7pwCgKMEm9TeuLD9Q2VYHYxIE2Grz
"""

import streamlit as st
import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# âœ… Streamlit page setup
st.set_page_config(page_title="ðŸ©º Diabetes Prediction", layout="wide")

# âœ… Background image using your uploaded photo
st.markdown(
    """
    <style>
    .stApp {
        background-image: url('https://raw.githubusercontent.com/harishmani7846/regress/main/bg_photo.jpg');
        background-size: cover;
        background-attachment: fixed;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# âœ… Tamil song playback
st.markdown(
    """
    <audio controls autoplay loop>
        <source src="https://raw.githubusercontent.com/harishmani7846/regress/main/Unkoodave%20Porakkanum(KoshalWorld.Com).mp3" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    """,
    unsafe_allow_html=True
)

# âœ… App Title
st.title("ðŸ©º Diabetes Prediction using Logistic Regression")

# âœ… Sample Data
data = {
    'age': [50, 31, 32, 45, 29],
    'plas': [148, 85, 89, 120, 94],
    'insu': [0, 0, 94, 0, 168],
    'mass': [33.6, 26.6, 28.1, 35.3, 23.1],
    'class': [1, 0, 0, 1, 0]
}
df = pd.DataFrame(data)

# âœ… Train Model
X = df[['age', 'plas', 'insu', 'mass']]
y = df['class']
model = LogisticRegression()
model.fit(X, y)

# âœ… Input Form
st.subheader("ðŸ‘¤ Enter Patient Data")
age = st.number_input("Age", 1, 120, 30)
plas = st.number_input("Plasma Glucose", 0, 200, 100)
insu = st.number_input("Insulin", 0, 1000, 100)
mass = st.number_input("BMI", 10.0, 80.0, 25.0)

# âœ… Prediction
if st.button("Predict"):
    input_data = np.array([[age, plas, insu, mass]])
    result = model.predict(input_data)
    if result[0] == 1:
        st.success("ðŸŽ¯ Prediction: Diabetic")
    else:
        st.success("ðŸ’ª Prediction: Not Diabetic")

# âœ… Show Accuracy
st.subheader("âœ… Model Accuracy")
train_pred = model.predict(X)
acc = accuracy_score(y, train_pred)
st.write(f"Training Accuracy: {acc:.2f}")


    pickle.dump(model, f)

from google.colab import files
files.download("diabetes_model.pkl")
